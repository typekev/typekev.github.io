{"version":3,"sources":["templates/Content/index.js","utils/checkValidity.js","utils/throwError.js","utils/checkStatus.js","utils/parseJSON.js","utils/request.js","hooks/useSocket.js","routes/Explore/api/index.js","hooks/useChat.js","components/TypingIndicator/TypingIndicatorContainer.js","components/TypingIndicator/StyledDot.js","components/TypingIndicator/Dot.js","components/TypingIndicator/index.js","routes/Explore/Chat.js","routes/Explore/Form.js","routes/Explore/Bot.js","routes/Explore/index.js"],"names":["Content","styled","Container","align","css","checkValidity","status","throwError","response","error","Error","statusText","checkStatus","parseJSON","json","logError","console","request","fetch","then","sampleQuestions","getSampleQuestion","Math","floor","random","length","initialState","returnedVisitorWelcome","getListener","socket","messagesRef","setMessages","setPrompts","addEventListener","data","messageActivities","JSON","parse","activities","filter","id","from","text","prompts","suggestedActions","reduce","accumulatedPrompts","actions","map","title","messages","current","onMessageReceived","useSocket","useCookies","TYPEKEV_SITE_PREV_WELCOMED","cookies","setCookie","useState","setSocket","useRef","useEffect","path","listener","removeEventListener","clearListener","args","WebSocket","REACT_APP_BOT_ORIGIN","process","getDirectLineConversation","token","method","body","stringify","catch","sendDirectLineMessage","setConversation","conversationId","type","headers","Authorization","rest","startNewDirectLineConversationFromMessage","getConversation","a","TypingIndicatorContainer","span","hop","keyframes","StyledDot","mdiSquareSmall","size","color","TypingIndicator","defaultSentenceDelayRange","minSentenceVisibilityDurationRange","Chat","disabled","displayingInitialMessage","hasMessages","Boolean","Typography","variant","Transition","component","Fade","in","timeout","delay","useMemo","sentenceDelayPerCharRange","messageLength","min","message","time","keyPressDelayRange","handleTyping","PROMPT_DESTINATION_MAP","onSubmit","sendMessage","setValue","value","e","preventDefault","onChange","currentTarget","onGetRandomQuestion","SpeechRecognition","autoStart","continuous","interimTranscript","transcript","startListening","stopListening","listening","browserSupportsSpeechRecognition","chatInput","document","getElementById","isChatFocused","focus","focusChat","activeElement","submit","noop","submitTranscript","maxWidth","FormControl","required","fullWidth","autoFocus","hiddenLabel","FilledInput","margin","placeholder","inputProps","startAdornment","InputAdornment","position","Tooltip","IconButton","edge","aria-label","onClick","mdiRobot","endAdornment","mdiMicrophoneOff","mdiMicrophone","mdiSend","ButtonGroup","prompt","Button","key","Link","to","Bot","clearMessages","streamUrl","useChat","startChat","messagesLength","getIsDisabled","setInitialSocket","Explore","Grow"],"mappings":"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","file":"static/js/12.884116fa.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\nimport Container from '@material-ui/core/Container';\n\nconst Content = styled(Container)`\n  margin-top: 3rem;\n  margin-bottom: 6rem;\n  pointer-events: none;\n\n  ${({ align }) =>\n    align === 'center' &&\n    css`\n      align-self: center;\n      margin-top: calc(-25vmin - 2rem);\n    `}\n`;\n\nexport default Content;\n","const checkValidity = status => status >= 200 && status < 300;\n\nexport default checkValidity;\n","const throwError = response => {\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n};\n\nexport default throwError;\n","import checkValidity from 'utils/checkValidity';\nimport throwError from 'utils/throwError';\n\nconst checkStatus = response => (checkValidity(response.status) ? response : throwError(response));\n\nexport default checkStatus;\n","const parseJSON = response => response.json();\n\nexport default parseJSON;\n","import checkStatus from 'utils/checkStatus';\nimport parseJSON from 'utils/parseJSON';\n\nexport const logError = error => console.error('request failed', error);\n\nconst request = (...args) =>\n  fetch(...args)\n    .then(checkStatus)\n    .then(parseJSON);\n\nexport default request;\n","import { useState, useEffect, useRef } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { TYPEKEV_SITE_PREV_WELCOMED } from 'resources/constants';\n\nexport const sampleQuestions = ['Who is Kevin?', 'What does Kevin do?', 'Where does Kevin work?'];\n\nexport const getSampleQuestion = () =>\n  sampleQuestions[Math.floor(Math.random() * sampleQuestions.length)];\n\nexport const initialState = [\n  500,\n  'Welcome, visitor.',\n  \"I'm Kevin's autonomous assistant.\",\n  `Ask me something like '${getSampleQuestion()}'`,\n];\n\nexport const returnedVisitorWelcome = [500, 'Welcome back, visitor.'];\n\nexport const onMessageReceived = (messagesRef, setMessages, setPrompts) => ({ data }) => {\n  const { activities } = JSON.parse(data);\n  const messageActivities = activities.filter(\n    ({ from: { id }, text }) => text && id === 'typekev-bot',\n  );\n\n  if (!messageActivities.length) {\n    return;\n  }\n\n  const prompts = messageActivities\n    .filter(({ suggestedActions }) => suggestedActions)\n    .reduce(\n      (accumulatedPrompts, { suggestedActions }) => [\n        ...accumulatedPrompts,\n        ...suggestedActions.actions.map(({ title }) => title),\n      ],\n      [],\n    );\n\n  const messages = [...messagesRef.current, ...messageActivities.map(({ text }) => text)];\n  setMessages(messages);\n  setPrompts(prompts);\n};\n\nexport const getListener = (socket, messagesRef, setMessages, setPrompts) =>\n  socket &&\n  socket.addEventListener('message', onMessageReceived(messagesRef, setMessages, setPrompts));\n\nexport const clearListener = (socket, listener) => () =>\n  socket && socket.removeEventListener('message', listener);\n\nconst useSocket = () => {\n  const [cookies, setCookie] = useCookies([TYPEKEV_SITE_PREV_WELCOMED]);\n  const [socket, setSocket] = useState();\n  const [messages, setMessages] = useState(\n    cookies[TYPEKEV_SITE_PREV_WELCOMED] ? returnedVisitorWelcome : initialState,\n  );\n  const [prompts, setPrompts] = useState([]);\n\n  const messagesRef = useRef(messages);\n  messagesRef.current = messages;\n\n  useEffect(() =>\n    setCookie(TYPEKEV_SITE_PREV_WELCOMED, 'true', {\n      path: '/',\n    }),\n  );\n\n  useEffect(() => {\n    const listener = getListener(socket, messagesRef, setMessages, setPrompts);\n    return clearListener(socket, listener);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [socket]);\n\n  return [\n    socket,\n    (...args) => setSocket(new WebSocket(...args)),\n    messagesRef.current,\n    () => setMessages(['']),\n    prompts,\n  ];\n};\n\nexport default useSocket;\n","import request, { logError } from 'utils/request';\n\nconst { REACT_APP_BOT_ORIGIN } = process.env;\n\nexport const getDirectLineConversation = token =>\n  request(`${REACT_APP_BOT_ORIGIN}directline/conversations`, {\n    method: 'POST',\n    body: JSON.stringify({ token }),\n  }).catch(logError);\n\nexport const startNewDirectLineConversationFromMessage = (\n  text,\n  sendDirectLineMessage,\n  setConversation,\n) => () =>\n  getDirectLineConversation()\n    .then(({ conversationId, token, ...rest }) => {\n      sendDirectLineMessage({ conversationId, token, text });\n      return { conversationId, token, ...rest };\n    })\n    .then(setConversation);\n\nexport const sendDirectLineMessage = (\n  { conversationId, token, text, type = 'message' },\n  setConversation,\n) =>\n  request(\n    `https://directline.botframework.com/v3/directline/conversations/${conversationId}/activities`,\n    {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        type,\n        from: {\n          id: 'typekev-site-user',\n        },\n        text,\n      }),\n    },\n  ).catch(startNewDirectLineConversationFromMessage(text, sendDirectLineMessage, setConversation));\n\nexport default { getDirectLineConversation };\n","import { useState } from 'react';\nimport { getDirectLineConversation, sendDirectLineMessage } from 'routes/Explore/api';\n\nexport const initialState = {};\n\nexport const getConversation = async setConversation =>\n  setConversation((await getDirectLineConversation()) || initialState);\n\nexport default function useChat(clearMessages) {\n  const [{ conversationId, token, streamUrl }, setConversation] = useState(initialState);\n  const startChat = () => getConversation(setConversation);\n  const sendMessage = text =>\n    typeof text === 'string' &&\n    sendDirectLineMessage({ conversationId, token, text }, setConversation, clearMessages());\n  return [{ conversationId, token, streamUrl }, startChat, sendMessage];\n}\n","import styled from 'styled-components';\n\nconst TypingIndicatorContainer = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  display: block;\n  height: 0;\n  overflow: visible;\n  margin-top: -1.625rem;\n  padding-bottom: 1.625rem;\n`;\n\nexport default TypingIndicatorContainer;\n","import styled, { keyframes } from 'styled-components';\nimport Dot from 'components/TypingIndicator/Dot';\n\nconst hop = keyframes`\n    0% {\n        transform:translateY(0rem)\n    }\n    28% {\n        transform:translateY(-0.375rem)\n    }\n    44% {\n        transform:translateY(0rem)\n    }\n`;\n\nconst StyledDot = styled(Dot)`\n  animation: ${hop} 1500ms infinite ease-in-out;\n\n  &:nth-child(1) {\n    animation-delay: 200ms;\n  }\n  &:nth-child(2) {\n    animation-delay: 300ms;\n  }\n  &:nth-child(3) {\n    animation-delay: 400ms;\n  }\n`;\n\nexport default StyledDot;\n","import React from 'react';\nimport Icon from '@mdi/react';\nimport { mdiSquareSmall } from '@mdi/js';\n\nexport default function Dot({ ...rest }) {\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Icon path={mdiSquareSmall} size={1} color=\"currentColor\" {...rest} />;\n}\n","import React from 'react';\nimport TypingIndicatorContainer from 'components/TypingIndicator/TypingIndicatorContainer';\nimport StyledDot from 'components/TypingIndicator/StyledDot';\n\nexport default function TypingIndicator({ ...rest }) {\n  return (\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    <TypingIndicatorContainer {...rest}>\n      <StyledDot />\n      <StyledDot />\n      <StyledDot />\n    </TypingIndicatorContainer>\n  );\n}\n","import React, { useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Keyboard, { Cursor } from 'react-mk';\nimport Fade from '@material-ui/core/Fade';\nimport Typography from '@material-ui/core/Typography';\nimport Transition from 'components/Transition';\nimport TypingIndicator from 'components/TypingIndicator';\nimport { initialState } from 'hooks/useSocket';\n\nexport const defaultSentenceDelayRange = [50, 75];\nexport const minSentenceVisibilityDurationRange = [1000, 1200];\nexport const getSentenceDelayRange = messageLength =>\n  messageLength * defaultSentenceDelayRange[0] > minSentenceVisibilityDurationRange[0]\n    ? defaultSentenceDelayRange\n    : minSentenceVisibilityDurationRange.map(time => time / messageLength);\n\nexport const handleTyping = messages => ({ type }) => type(...messages);\n\nexport default function Chat({ messages, disabled }) {\n  const messagesRef = useRef(messages);\n  messagesRef.current = messages;\n\n  const displayingInitialMessage = messages[0] === initialState[0];\n  const hasMessages = messages.filter(Boolean).length > 0;\n\n  return (\n    <Typography variant=\"h6\" align=\"center\">\n      <Transition component={Fade} in={hasMessages} timeout={hasMessages ? 500 : 0} delay={0}>\n        <div>\n          {useMemo(\n            () =>\n              hasMessages && (\n                <Keyboard\n                  sentenceDelayPerCharRange={\n                    /* istanbul ignore next */\n                    disabled && !displayingInitialMessage\n                      ? [0, 0]\n                      : getSentenceDelayRange(\n                          Math.min(...messages.map(message => message.length).filter(Boolean)),\n                        )\n                  }\n                  keyPressDelayRange={[65, 80]}\n                >\n                  {handleTyping(messages)}\n                </Keyboard>\n              ),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [messages],\n          )}\n          <Cursor />\n        </div>\n      </Transition>\n      <Transition component={Fade} in={!hasMessages} timeout={500} delay={0}>\n        <TypingIndicator />\n      </Transition>\n    </Typography>\n  );\n}\n\nChat.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])).isRequired,\n  disabled: PropTypes.bool.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport SpeechRecognition from 'react-speech-recognition';\nimport PropTypes from 'prop-types';\nimport noop from 'lodash.noop';\nimport FormControl from '@material-ui/core/FormControl';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Container from '@material-ui/core/Container';\nimport Fade from '@material-ui/core/Fade';\nimport Icon from '@mdi/react';\nimport { mdiSend, mdiRobot, mdiMicrophone, mdiMicrophoneOff } from '@mdi/js';\nimport { getSampleQuestion } from 'hooks/useSocket';\nimport Transition from 'components/Transition';\n\nexport const CHAT_INPUT_ID = 'chatbot-input';\n\nexport const focusChat = (value, disabled, chatInput, isChatFocused) =>\n  (value || !disabled) && chatInput && !isChatFocused && chatInput.focus();\n\nexport const submitTranscript = (value, submit) => value && submit({ preventDefault: noop });\n\nconst PROMPT_DESTINATION_MAP = {\n  'Learn more about Kevin': '/discover/',\n  \"Learn about Kevin's job\": '/work/',\n};\n\nexport const initialState = {\n  value: '',\n};\n\nexport const onSubmit = (sendMessage, setValue, value) => e => {\n  e.preventDefault();\n  sendMessage(value);\n  setValue(initialState.value);\n};\n\nexport const onChange = setValue => ({ currentTarget }) => setValue(currentTarget.value);\n\nexport const onGetRandomQuestion = setValue => () => setValue(getSampleQuestion());\n\nfunction Form({\n  prompts,\n  sendMessage,\n  disabled,\n  interimTranscript,\n  transcript,\n  startListening,\n  stopListening,\n  listening,\n  browserSupportsSpeechRecognition,\n}) {\n  const [value, setValue] = useState(initialState.value);\n\n  useEffect(() => {\n    if (browserSupportsSpeechRecognition && listening) {\n      onChange(setValue)({ currentTarget: { value: interimTranscript || transcript } });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [interimTranscript, transcript]);\n\n  useEffect(() => {\n    const chatInput = document.getElementById(CHAT_INPUT_ID);\n    focusChat(value, disabled, chatInput, document.activeElement.id === CHAT_INPUT_ID);\n  }, [value, disabled]);\n\n  useEffect(() => {\n    submitTranscript(value, onSubmit(sendMessage, setValue, value));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [listening]);\n\n  return (\n    <Container maxWidth=\"sm\">\n      <form onSubmit={onSubmit(sendMessage, setValue, value)}>\n        <FormControl required fullWidth autoFocus hiddenLabel>\n          <FilledInput\n            onChange={onChange(setValue)}\n            value={value}\n            disabled={disabled}\n            id={CHAT_INPUT_ID}\n            margin=\"dense\"\n            placeholder={disabled ? 'The bot is typing' : 'Tell me something'}\n            inputProps={{ 'aria-label': 'chatbot input' }}\n            startAdornment={\n              <InputAdornment position=\"start\">\n                <Tooltip\n                  title={\n                    value\n                      ? \"You've already started typing a question\"\n                      : 'Generate a random question'\n                  }\n                >\n                  <span>\n                    <IconButton\n                      edge=\"start\"\n                      aria-label=\"generate a random question\"\n                      disabled={disabled || !!value}\n                      onClick={onGetRandomQuestion(setValue)}\n                    >\n                      <Icon path={mdiRobot} size={1} color=\"currentColor\" />\n                    </IconButton>\n                  </span>\n                </Tooltip>\n              </InputAdornment>\n            }\n            endAdornment={\n              <InputAdornment position=\"end\">\n                {browserSupportsSpeechRecognition && !value ? (\n                  <Tooltip title=\"Tap to talk\">\n                    <span>\n                      <IconButton\n                        edge=\"end\"\n                        aria-label=\"tap to talk\"\n                        disabled={disabled}\n                        onClick={listening ? stopListening : startListening}\n                      >\n                        <Icon\n                          path={listening ? mdiMicrophoneOff : mdiMicrophone}\n                          size={1}\n                          color=\"currentColor\"\n                        />\n                      </IconButton>\n                    </span>\n                  </Tooltip>\n                ) : (\n                  <Tooltip title=\"Send message\">\n                    <span>\n                      <IconButton\n                        edge=\"end\"\n                        aria-label=\"send message\"\n                        disabled={disabled || !value}\n                        onClick={onSubmit(sendMessage, setValue, value)}\n                      >\n                        <Icon path={mdiSend} size={1} color=\"currentColor\" />\n                      </IconButton>\n                    </span>\n                  </Tooltip>\n                )}\n              </InputAdornment>\n            }\n          />\n        </FormControl>\n      </form>\n      <br />\n      <Transition\n        component={Fade}\n        in={prompts.length > 0 && !disabled}\n        timeout={1000}\n        delay={disabled ? 0 : 500}\n      >\n        <ButtonGroup variant=\"contained\" color=\"primary\">\n          {prompts.map(prompt => (\n            <Button key={prompt} component={Link} to={PROMPT_DESTINATION_MAP[prompt]}>\n              {prompt}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </Transition>\n    </Container>\n  );\n}\n\nForm.propTypes = {\n  prompts: PropTypes.arrayOf(PropTypes.string).isRequired,\n  sendMessage: PropTypes.func.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  interimTranscript: PropTypes.string.isRequired,\n  transcript: PropTypes.string.isRequired,\n  startListening: PropTypes.func.isRequired,\n  stopListening: PropTypes.func.isRequired,\n  listening: PropTypes.bool.isRequired,\n  browserSupportsSpeechRecognition: PropTypes.bool.isRequired,\n};\n\nconst options = {\n  autoStart: false,\n  continuous: false,\n};\n\nexport default SpeechRecognition(options)(Form);\n","import React, { useEffect } from 'react';\nimport useSocket from 'hooks/useSocket';\nimport useChat from 'hooks/useChat';\nimport Chat from 'routes/Explore/Chat';\nimport Form from 'routes/Explore/Form';\n\nexport const setInitialSocket = (streamUrl, socket, setSocket) =>\n  streamUrl && !socket && setSocket(streamUrl);\n\nexport const getIsDisabled = (streamUrl, messagesLength) => !streamUrl || messagesLength === 0;\n\nexport default function Bot() {\n  const [socket, setSocket, messages, clearMessages, prompts] = useSocket();\n  const [{ streamUrl }, startChat, sendMessage] = useChat(clearMessages);\n\n  const disabled = getIsDisabled(streamUrl, messages.filter(Boolean).length);\n\n  useEffect(() => {\n    startChat();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setInitialSocket(streamUrl, socket, setSocket);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [streamUrl]);\n\n  return (\n    <>\n      <Chat messages={messages} disabled={disabled} />\n      <Form prompts={prompts} sendMessage={sendMessage} disabled={disabled} />\n    </>\n  );\n}\n","import React from 'react';\nimport Grow from '@material-ui/core/Grow';\nimport Content from 'templates/Content';\nimport Transition from 'components/Transition';\nimport Bot from 'routes/Explore/Bot';\n\nexport default function Explore() {\n  return (\n    <Transition in component={Grow}>\n      <Content align=\"center\" maxWidth=\"md\">\n        <Bot />\n      </Content>\n    </Transition>\n  );\n}\n"],"sourceRoot":""}